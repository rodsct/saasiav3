# Docker Compose for EasyPanel Deployment
# SaaS v3 - AI Platform with Chatbot, Downloads & Admin Panel

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: saasiav3-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: saasiav3
      POSTGRES_USER: saasiav3
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-saasiav3_secure_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U saasiav3 -d saasiav3"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: saasiav3-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_password_123}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_password_123}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Application
  app:
    image: node:20-alpine
    container_name: saasiav3-app
    restart: unless-stopped
    working_dir: /app
    command: >
      sh -c "
      apk add --no-cache libc6-compat curl &&
      npm install --legacy-peer-deps &&
      npx prisma generate &&
      npm run dev
      "
    expose:
      - "3000"
    volumes:
      - .:/app
      - /app/node_modules
      - app_uploads:/app/public/uploads
    environment:
      # Database
      DATABASE_URL: postgresql://saasiav3:${POSTGRES_PASSWORD:-saasiav3_secure_password_123}@postgres:5432/saasiav3
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password_123}@redis:6379
      
      # Authentication
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-tu_nextauth_secret_muy_largo_y_seguro_32_caracteres_minimo}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-https://tu-dominio.com}
      
      # App Configuration  
      NODE_ENV: production
      NEXT_PUBLIC_SITE_URL: ${NEXT_PUBLIC_SITE_URL:-https://tu-dominio.com}
      SITE_URL: ${NEXT_PUBLIC_SITE_URL:-https://tu-dominio.com}
      SITE_NAME: ${SITE_NAME:-Aranza.io}
      AUTHOR_NAME: ${AUTHOR_NAME:-Aranza Team}
      
      # n8n Webhook
      DEFAULT_N8N_WEBHOOK: ${DEFAULT_N8N_WEBHOOK:-https://infra-v2-n8n-v2.uclxiv.easypanel.host/webhook/saasiav3}
      
      # OAuth Providers (optional)
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID:-}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET:-}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-}
      
      # Email Configuration (optional)
      EMAIL_SERVER_USER: ${EMAIL_SERVER_USER:-}
      EMAIL_SERVER_PASSWORD: ${EMAIL_SERVER_PASSWORD:-}
      EMAIL_SERVER_HOST: ${EMAIL_SERVER_HOST:-}
      EMAIL_SERVER_PORT: ${EMAIL_SERVER_PORT:-587}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@tu-dominio.com}
      
      # Stripe Configuration (configure when ready)
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY:-}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET:-}
      
      # Port
      PORT: 3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_uploads:
    driver: local

# EasyPanel Network (EasyPanel maneja autom√°ticamente las redes)
networks:
  default:
    external: false